{"title":"Python Programming Tips","markdown":{"yaml":{"title":"Python Programming Tips","author":"Isaac Flath","date":"2022-11-06","description":"A list of handy tips and tricks when programming in python","categories":["Python","Programming"]},"headingText":"Setup","containsRefs":false,"markdown":"\n\n\n# Purpose\n\nThe purpose of this is to introduce concepts I believe data scientists could benefit from knowing.\n\nI am assuming that the reader knows the basics of programming.  I will cover concepts I frequently see that I think are not used enough or appropriately, regardless of how basic or advanced they may be.\n\n# Comprehensions\n\nComprehensions in python should be used when possible.  They are faster than forloops and require less code when they fit\n\nThis is basically special syntax for a forloop, and are useful in a subset of forloops.  Basically any time you see the pattern where you initialize something, then modify or build it in the forloop you can likely use a comprehension\n\nList comprehensions are most common but you can also do tuple comprehension, set comprehension, dict comprehension, or other data types.\n\nA few handy patterns are:\n\n+ Reversing a dictionary\n+ Combining lists\n+ All unique combos from multiple lists (nested comprehension)\n\n# Destructuring\n\nDestructured assignments mean to can break up iterables when you assign.  This is handy to reduce pointless lines of code.\n\nAnother use is to break up lists to create lists where we take all the first elements out into it's own list, and the second elements out into their own lists.\n\nI often see this done with multiple list comprehension, doing `[o[0] for o in [x,y,z]]` to get the first element, then repeating for other elements.  \n\nHowever, we can do this easier with the help of zip and destructured assignments\n\n# Fastcore\n\nFastcore is a great library to know.  It's got a lot of useful features and extensions to the python standard library and it's designed to be used in live environments like jupyter notebooks.\n\n## Parallel Processing\n\nSee [this blog post](PythonConcurrency.ipynb)\n\n### Docments\n\nNice way of documenting code concisely and being able to access info from code.  It's concise, easy to manipulate to display how you want, and easy to read.  I much prefer it over the large numpy style docstrings that are big string blocks\n\n### Testing \n\nEveryone agrees testing is important.  But not all testing is equal.  The needs for unit testing the google code base are not the same as the needs a data scientist needs for building and deploying models, libraries, and most software.\n\nFastcore is a great tool for most of my testing needs.  Fast and simple enough that I can add tests as I build and as I am exploring and building models.  I want testing to enhance my development workflow, not be something I have to painstakingly build at the end.\n\nSometimes simple assert statements are sufficient, but there's small annoyances.  For example, a small change in type can mean a failed test.  Sometimes that change in type should cause a failure, sometimes I'm ok if it's a different type if the values are the same\n\nFor floating points it has handy functionality for that, which is very common in data science.  For example, we may want `.1 + .1 + .1 == .3` to be true, because they are close enough based on floating point precision\n\nWe can test that something fails, if there are particular situation we want to ensure raise errors.\n\nWe can test if 2 lists have the same values, just in different orders (convenient for testing some situations with random mini-batches).\n\nThere's more of course, check out the [docs](fastcore.fast.ai)\n\n### L\n\nL is a replacement for a list, but with lots of adding functionality.  Some of it are functional programming concepts, some is numpy like stuff, and some is just niceities (like cleaner printing).\n\n### AttrDict\n\n`Attrdict` is another nice thing from fastcore, that makes dictionaries a bit nicer to use.\n\n# Logging\n\nLogging is super important.  if you log stuff as you work properly you can always look back at what was done previously.  Sometimes it's hard to tell what's going on as you run and re-run different things.  Logging is handy not just in production for debugging, but also as a tool when you are developing.  There are many tools to help with logging and visualizing results (for example W&B or tensorboard for deep learning) - but the foundations are good to understand and use too!\n\n# Higher Order Functions & Callbacks\n\nThis is a simple example of what these terms mean:\n\n+ A higher order function is a function that takes a function as an argument\n+ A callback is a function that is passed in as an argument to a higher order function\n\nThis is handy in a lot of situations.  \n\n## Filter \n\nFilter is a common higher order function.\n\nThis is very flexible because we can put filtering logic of any complexity in a function and use that to filter a list of any type.\n\n## Map \n\nMap is another very common higher order function.\n\nIt is again super flexible because we can apply a function of any complexity to have it be applied and modify each element of the list.\n\n## Simple Logging\n\nWe could make a function for logging, where we can pass a function in that we want to use for logging (ie info vs warning).\n\n## File Processor\n\nYou can also make a generic file processor that you can pass callbacks to.  This file processor can include log statements to log what you're doing, so you can minimize repeating lots of code.  For now, we'll do a simple processor, and callbacks to clean and format a messy sql file.\n\n## Format and clean SQL file\n\n# Decorators\n\nDecorators give you a way to add the same functionality to many functions (like inheritance does for classes).  You typically use decorator using the `@` syntax, which modified the function.\n\n## Silly Simple Example\n\nSo when we use a decorator, the code in the `wrapper` function is called instead of the original function.  Typically the `wrapper` function calls the original function (otherwise there would be no point in decorating it as you'd just have a new unrelated function).\n\n## Useful Example\n\nFor example, maybe you want to print (or log) particular function call times and the args.  See this decorator that does just that (and can be used on methods too)\n\n## Use on Existing Functions\n\nWhat we have seen is applying a decorator to functions we fully define but we can also apply them to previously existing functions like ones we import from a library.  This is helpful not just in understanding one way you can extend an existing libraries functionality, but also in understanding what decorators are.  They aren't magical.\n\nLet's add logging to `pd.DataFrame` using our existing decorator so we can see when a dataframe is constructed.\n\nThe key thing to notice here is that the `@` syntax really isn't doing anything magical.  It's just passing the function into the decorator and using that as the function definition.  It's just syntactic sugar for a higher order function that takes a function and returns a function.\n\nTo understand why this works, think through what our decorator is doing.\n1. It's a function that takes a function as an argument\n2. It creates a new function called `wrapper`.  This `wrapper` function called the argument passed into it, but also has other code.\n3. It returns that function as the output\n\n# Inheritance\n\nInheritance is the idea that you a class can \"Inherit\" attributes and methods from other classes.\n\nFor example a class could have an attribute `a`, and it can be used to create a new class to give it that attribute without having to specify it.\n\n## Silly Simple Example\n\n## Useful Examples\n\nIn many cases there are common things we want to inherit in lots of classes.  One example is having access to the date.  Often you want this for logging, or printing, or any number of things.  By subclassing you don't have to reformat the date each time in your classes.\n\nAnother handy use is to have generic behavior for handling different file types.  In this case, we have a mixin where it opens and reads a sql file.  Rather than rewriting this code for every class that needs to read a sql file, you can inherit from a class when you need that functionality.\n\n:::{.callout-tip}\nYou can define an abstract property like below to let users know that after inheriting this class, they need to define that property.  In this case, they define the `sql_filepath`, and they get the contents of the file for free via the other methods.\n:::\n\n# Dunders\n\n# Iterators/Data Streaming\n\nIterators are useful when you don't want to just load all data in memory all at once.  They are often defined with `yield`, but there are other ways.\n\n## Silly Simple Example\n\nYou can also process it sequentially in a loop.\n\n## Useful Example\n\n### File Streaming\n","srcMarkdownNoYaml":"\n\n# Setup\n\n# Purpose\n\nThe purpose of this is to introduce concepts I believe data scientists could benefit from knowing.\n\nI am assuming that the reader knows the basics of programming.  I will cover concepts I frequently see that I think are not used enough or appropriately, regardless of how basic or advanced they may be.\n\n# Comprehensions\n\nComprehensions in python should be used when possible.  They are faster than forloops and require less code when they fit\n\nThis is basically special syntax for a forloop, and are useful in a subset of forloops.  Basically any time you see the pattern where you initialize something, then modify or build it in the forloop you can likely use a comprehension\n\nList comprehensions are most common but you can also do tuple comprehension, set comprehension, dict comprehension, or other data types.\n\nA few handy patterns are:\n\n+ Reversing a dictionary\n+ Combining lists\n+ All unique combos from multiple lists (nested comprehension)\n\n# Destructuring\n\nDestructured assignments mean to can break up iterables when you assign.  This is handy to reduce pointless lines of code.\n\nAnother use is to break up lists to create lists where we take all the first elements out into it's own list, and the second elements out into their own lists.\n\nI often see this done with multiple list comprehension, doing `[o[0] for o in [x,y,z]]` to get the first element, then repeating for other elements.  \n\nHowever, we can do this easier with the help of zip and destructured assignments\n\n# Fastcore\n\nFastcore is a great library to know.  It's got a lot of useful features and extensions to the python standard library and it's designed to be used in live environments like jupyter notebooks.\n\n## Parallel Processing\n\nSee [this blog post](PythonConcurrency.ipynb)\n\n### Docments\n\nNice way of documenting code concisely and being able to access info from code.  It's concise, easy to manipulate to display how you want, and easy to read.  I much prefer it over the large numpy style docstrings that are big string blocks\n\n### Testing \n\nEveryone agrees testing is important.  But not all testing is equal.  The needs for unit testing the google code base are not the same as the needs a data scientist needs for building and deploying models, libraries, and most software.\n\nFastcore is a great tool for most of my testing needs.  Fast and simple enough that I can add tests as I build and as I am exploring and building models.  I want testing to enhance my development workflow, not be something I have to painstakingly build at the end.\n\nSometimes simple assert statements are sufficient, but there's small annoyances.  For example, a small change in type can mean a failed test.  Sometimes that change in type should cause a failure, sometimes I'm ok if it's a different type if the values are the same\n\nFor floating points it has handy functionality for that, which is very common in data science.  For example, we may want `.1 + .1 + .1 == .3` to be true, because they are close enough based on floating point precision\n\nWe can test that something fails, if there are particular situation we want to ensure raise errors.\n\nWe can test if 2 lists have the same values, just in different orders (convenient for testing some situations with random mini-batches).\n\nThere's more of course, check out the [docs](fastcore.fast.ai)\n\n### L\n\nL is a replacement for a list, but with lots of adding functionality.  Some of it are functional programming concepts, some is numpy like stuff, and some is just niceities (like cleaner printing).\n\n### AttrDict\n\n`Attrdict` is another nice thing from fastcore, that makes dictionaries a bit nicer to use.\n\n# Logging\n\nLogging is super important.  if you log stuff as you work properly you can always look back at what was done previously.  Sometimes it's hard to tell what's going on as you run and re-run different things.  Logging is handy not just in production for debugging, but also as a tool when you are developing.  There are many tools to help with logging and visualizing results (for example W&B or tensorboard for deep learning) - but the foundations are good to understand and use too!\n\n# Higher Order Functions & Callbacks\n\nThis is a simple example of what these terms mean:\n\n+ A higher order function is a function that takes a function as an argument\n+ A callback is a function that is passed in as an argument to a higher order function\n\nThis is handy in a lot of situations.  \n\n## Filter \n\nFilter is a common higher order function.\n\nThis is very flexible because we can put filtering logic of any complexity in a function and use that to filter a list of any type.\n\n## Map \n\nMap is another very common higher order function.\n\nIt is again super flexible because we can apply a function of any complexity to have it be applied and modify each element of the list.\n\n## Simple Logging\n\nWe could make a function for logging, where we can pass a function in that we want to use for logging (ie info vs warning).\n\n## File Processor\n\nYou can also make a generic file processor that you can pass callbacks to.  This file processor can include log statements to log what you're doing, so you can minimize repeating lots of code.  For now, we'll do a simple processor, and callbacks to clean and format a messy sql file.\n\n## Format and clean SQL file\n\n# Decorators\n\nDecorators give you a way to add the same functionality to many functions (like inheritance does for classes).  You typically use decorator using the `@` syntax, which modified the function.\n\n## Silly Simple Example\n\nSo when we use a decorator, the code in the `wrapper` function is called instead of the original function.  Typically the `wrapper` function calls the original function (otherwise there would be no point in decorating it as you'd just have a new unrelated function).\n\n## Useful Example\n\nFor example, maybe you want to print (or log) particular function call times and the args.  See this decorator that does just that (and can be used on methods too)\n\n## Use on Existing Functions\n\nWhat we have seen is applying a decorator to functions we fully define but we can also apply them to previously existing functions like ones we import from a library.  This is helpful not just in understanding one way you can extend an existing libraries functionality, but also in understanding what decorators are.  They aren't magical.\n\nLet's add logging to `pd.DataFrame` using our existing decorator so we can see when a dataframe is constructed.\n\nThe key thing to notice here is that the `@` syntax really isn't doing anything magical.  It's just passing the function into the decorator and using that as the function definition.  It's just syntactic sugar for a higher order function that takes a function and returns a function.\n\nTo understand why this works, think through what our decorator is doing.\n1. It's a function that takes a function as an argument\n2. It creates a new function called `wrapper`.  This `wrapper` function called the argument passed into it, but also has other code.\n3. It returns that function as the output\n\n# Inheritance\n\nInheritance is the idea that you a class can \"Inherit\" attributes and methods from other classes.\n\nFor example a class could have an attribute `a`, and it can be used to create a new class to give it that attribute without having to specify it.\n\n## Silly Simple Example\n\n## Useful Examples\n\nIn many cases there are common things we want to inherit in lots of classes.  One example is having access to the date.  Often you want this for logging, or printing, or any number of things.  By subclassing you don't have to reformat the date each time in your classes.\n\nAnother handy use is to have generic behavior for handling different file types.  In this case, we have a mixin where it opens and reads a sql file.  Rather than rewriting this code for every class that needs to read a sql file, you can inherit from a class when you need that functionality.\n\n:::{.callout-tip}\nYou can define an abstract property like below to let users know that after inheriting this class, they need to define that property.  In this case, they define the `sql_filepath`, and they get the contents of the file for free via the other methods.\n:::\n\n# Dunders\n\n# Iterators/Data Streaming\n\nIterators are useful when you don't want to just load all data in memory all at once.  They are often defined with `yield`, but there are other ways.\n\n## Silly Simple Example\n\nYou can also process it sequentially in a loop.\n\n## Useful Example\n\n### File Streaming\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":"oblivion","include-in-header":[{"text":"<!-- Load fonts from Google Fonts -->\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Marhey:wght@400;700&family=Fira+Code:wght@400;700&display=swap\">\n<style>\n  /* Apply Marhey to all headings */\n  h2, h3, h4, h5, h6 {\n    font-family: 'Marhey', Arial, sans-serif;\n    font-weight: 400; /* Optional: bold for titles */\n  }\n  /* Apply Marhey to titles specifically */\n  h1 {\n    font-family: 'Marhey', Arial, sans-serif;\n    font-weight: 700; /* Optional: bold for titles */\n    font-size: 2em; /* Adjust size as needed */\n  }            \n  /* Apply Fira Code to code elements */\n  code, pre {\n    font-family: 'Fira Code', Monaco, monospace;\n  }\n</style>\n<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\">\n<!-- Additional custom styles -->\n<style>\n/* Optional: Customize icon appearance */\n<style>\n  .fa-home {\n    font-size: 24px; /* Adjust size as needed */\n    color: #000; /* Change color if needed */\n    vertical-align: middle; /* Align icon with text */\n  }\n</style>\n"}],"toc":true,"toc-depth":2,"number-sections":true,"output-file":"Python.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","theme":"lumen","mainfont":"Playfair Display, Georgia, serif","headingfont":"Marhey, Arial, sans-serif","monofont":"Fira Code, Monaco, monospace","code-summary":"Code","title-block-banner":true,"toc-location":"right","toc-title":"Contents","number-depth":2,"title":"Python Programming Tips","author":"Isaac Flath","date":"2022-11-06","description":"A list of handy tips and tricks when programming in python","categories":["Python","Programming"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}